# -*- coding: utf-8 -*-
"""sudoku

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dUqOsRTdZIU5Mb-rns5C2dj7ZZt3Hspb
"""

#스도쿠 풀이 프로그램 저장용
####################################### a행의 모든 빈 셀의 리스트에서 b를 삭제 ####
def del_row(a,b):
  if a==0 and b== 0:
    for x in range(81):
      if type(cell[x][3]) == type(1):
        for y in range(81):
          if cell[y][0] == cell[x][0]:
            if type(cell[y][3]) == type([1,2,3]):
              if cell[x][3] in cell[y][3]:
                cell[y][3].remove(cell[x][3])

  else:
    for v in range(81):
      if cell[v][0] == a :
        if type(cell[v][3]) == type([1,2,3]):
          if b in cell[v][3]:
            cell[v][3].remove(b)
            global change
            change +=1
####################################### a열의 모든 빈 셀의 리스트에서 b를 삭제 ####
def del_col(a,b):
  if a==0 and b== 0:
    for x in range(81):
      if type(cell[x][3]) == type(1):
        for y in range(81):
          if cell[y][1] == cell[x][1]:
            if type(cell[y][3]) == type([1,2,3]):
              if cell[x][3] in cell[y][3]:
                cell[y][3].remove(cell[x][3])

  else:
    for v in range(81):
      if cell[v][1] == a :
        if type(cell[v][3]) == type([1,2,3]):
          if b in cell[v][3]:
            cell[v][3].remove(b)

            global change
            change += 1
####################################### a칸의 모든 빈 셀의 리스트에서 b를 삭제 ####
def del_sub(a,b):
  if a==0 and b== 0:
    for x in range(81):
      if type(cell[x][3]) == type(1):
        for y in range(81):
          if cell[y][2] == cell[x][2]:
            if type(cell[y][3]) == type([1,2,3]):
              if cell[x][3] in cell[y][3]:
                cell[y][3].remove(cell[x][3])


  else:
    for v in range(81):
      if cell[v][2] == a :
        if type(cell[v][3]) == type([1,2,3]):
          if b in cell[v][3]:
            cell[v][3].remove(b)
            global change
            change += 1
####################################### 값을 확정하고, 나머지 모든 셀에서 삭제 ####
def correct():
  for w in range(81):
    if type(cell[w][3]) == type([1,2,3]):
      if len(cell[w][3]) == 1 :
        cell[w][3] = cell[w][3][0]
        global change
        change += 1
        del_row(cell[w][0],cell[w][3])
        del_col(cell[w][1],cell[w][3])
        del_sub(cell[w][2],cell[w][3])

####################################### 각 행에서 유일값이 든 셀의 나머지 삭제 ####
def only_row():
  for k in range(9):
    only=[]
    only_num = 0
    for j in range(81):
      if cell[j][0] == k:
        if type(cell[j][3])==type([1,2,3]):
          only+=(cell[j][3])
    if only==[]:
        pass
    else:
        for i in range(9):
            if only.count(i+1)==1:
                only_num = i+1
                break
        if only_num ==0:
            break
    for l in range(81):
        if cell[l][0]==k:
          if type(cell[l][3])==type([1,2]):
            if only_num in cell[l][3]:
              cell[l][3] = only_num
              break
####################################### 각 열에서 유일값이 든 셀의 나머지 삭제 ####
def only_col():
  for k in range(9):
    only=[]
    only_num = 0
    for j in range(81):
      if cell[j][1] == k:
        if type(cell[j][3])==type([1,2,3]):
          only+=(cell[j][3])
    if only==[]:
        pass
    else:
        for i in range(9):
            if only.count(i+1)==1:
                only_num = i+1
                break
        if only_num ==0:
            break
    for l in range(81):
        if cell[l][1]==k:
          if type(cell[l][3])==type([1,2]):
            if only_num in cell[l][3]:
              cell[l][3] = only_num
              break
####################################### 각 칸에서 유일값이 든 셀의 나머지 삭제 ####
def only_sub():
  for k in range(9):
    only=[]
    only_num = 0
    for j in range(81):
      if cell[j][2] == k:
        if type(cell[j][3])==type([1,2,3]):
          only+=(cell[j][3])
    if only==[]:
        pass
    else:
        for i in range(9):
            if only.count(i+1)==1:
                only_num = i+1
                break
        if only_num ==0:
            break

    for l in range(81):
        if cell[l][2]==k:
          if type(cell[l][3])==type([1,2]):
            if only_num in cell[l][3]:
              cell[l][3] = only_num
              break
####################################### 행,열,칸의 유일값 함수 및 correct 실행 ####
def Easy():
    only_row()
    only_col()
    only_sub()
    correct()
####################################### 행에서 a가 한 칸에 있을때 칸에서 a삭제 #### <<
def must_row():
  for i in range(9):
      for j in range(9):
          must=[]
          for k in range(81):
            if cell[k][0] == i:
                if type(cell[k][3]) == type([1,2]):
                    if j in cell[k][3]:
                        if cell[k][2] in must:
                            pass
                        else:
                            must.append(cell[k][2])
          if len(must) == 1:
              for l in range(81):
                if cell[l][2] == must[0]:
                  if cell[l][0] != i:
                    if type(cell[l][3]) == type([1,2,3]):
                      if j in cell[l][3]:
                        cell[l][3].remove(j)
####################################### 열에서 a가 한 칸에 있을때 칸에서 a삭제 ####
def must_col():
  for i in range(9):
      for j in range(9):
          must=[]
          for k in range(81):
            if cell[k][1] == i:
                if type(cell[k][3]) == type([1,2]):
                    if j in cell[k][3]:
                        if cell[k][2] in must:
                            pass
                        else:
                            must.append(cell[k][2])
          if len(must) == 1:
              for l in range(81):
                if cell[l][2] == must[0]:
                  if cell[l][1] != i:
                    if type(cell[l][3]) == type([1,2,3]):
                      if j in cell[l][3]:
                        cell[l][3].remove(j)
####################################### 칸에서 a가 한 행에 있을때 행에서 a삭제 ####
def must_subr():
  for i in range(9):
      for j in range(9):
          must=[]
          for k in range(81):
            if cell[k][2] == i:
                if type(cell[k][3]) == type([1,2]):
                    if j in cell[k][3]:
                        if cell[k][0] in must:
                            pass
                        else:
                            must.append(cell[k][0])
          if len(must) == 1:
              for l in range(81):
                if cell[l][0] == must[0]:
                  if cell[l][2] != i:
                    if type(cell[l][3]) == type([1,2,3]):
                      if j in cell[l][3]:
                        cell[l][3].remove(j)
####################################### 칸에서 a가 한 열에 있을때 열에서 a삭제 ####
def must_subc():
  for i in range(9):
      for j in range(9):
          must=[]
          for k in range(81):
            if cell[k][2] == i:
                if type(cell[k][3]) == type([1,2]):
                    if j in cell[k][3]:
                        if cell[k][1] in must:
                            pass
                        else:
                            must.append(cell[k][1])
          if len(must) == 1:
              for l in range(81):
                if cell[l][1] == must[0]:
                  if cell[l][2] != i:
                    if type(cell[l][3]) == type([1,2,3]):
                      if j in cell[l][3]:
                        cell[l][3].remove(j)
####################################### 행,열,칸의 must함수 4개와 correct 실행 ####
def Normal():
    must_row()
    must_col()
    must_subr()
    must_subc()
    correct()
####################################### 스도쿠를 입력받아 형태를 가공하는 과정 ####
print("스도쿠를 띄어쓰기 없이 빈칸은 0으로 간주하여 한 줄에 숫자 9개씩 9줄로 입력해주세요")
cell=[]
for i in range(9):                        # 다음을 9번 반복
  cells = []                              # 빈 리스트 cells 생성
  row= input()                            # 첫째 줄의 숫자 9개를 9자리 문자열로 받아 row로 저장
  for j in range(9):                      # 다음을 9번 반복
    cells.append(row[j])                  # row의 각 자리 숫자를 순서대로 cells 리스트에 추가
    cell.append([])                       # cell에 빈 리스트를 만들어, 각 리스트에 row,col,sub,value의 값을 입력한다
    cell[j+i*9].append(i)                 # [0]=row ,[1]=col, [2]=sub, [3]=value
    cell[j+i*9].append(j)
    cell[j+i*9].append((i//3)*3+((j//3)))
    cell[j+i*9].append(int(row[j]))
for z in range(81) :
  if cell[z][3] == 0:
    cell[z][3] = [1,2,3,4,5,6,7,8,9]
####################################### 정의한 함수를 이용, 스도쿠를 직접 풀이 ####
global change
change = 0
del_col(0,0)
del_row(0,0)
del_sub(0,0)
while change !=1:
  change =1
  correct()
  if change ==1:
    Easy()
    if change == 1:
      Normal()
  else:
    pass
####################################### 개발과정에서 확인하기 위한 식으로 출력 ####
now = '\n'
check = now
show = now
Count = 0
for k in range(len(cell)):
  if type(cell[k][3])==type(0):
      Count +=1
  check += str(cell[k][3])+' '
  if (k+1)%9 == 0 :
    check += '\n'
print(check)
print(Count)
####################################### 완성된 스도쿠를 문자열의 형식으로 출력 ####
for t in range(len(cell)):
  if type(cell[t][3]) ==type([1,2,3]):
    show += "0 "
    if (t+1)%9 == 0 :
      show += '\n'
  else:
    show += str(cell[t][3])+' '
    if (t+1)%9 == 0 :
      show += '\n'
print(show)
####### 예 제 ######
#  지금 사용하는 방법
#  주어진 문제에서 빈칸의 모든 후보수를 입력한다
#  correct = 후보수가 1개만 남은 수를 확정하고, 다시 row,col,sub 실행
#  Easy : 행, 열, 칸에서 유일한 후보수를 찾아 나머지 수 제거 + correct
#  Normal : x가 특정 a 안에서 한 b 에만 있을 때, 전체 b 중 a를 제외한 부분에서 x 삭제 +correct <<<<<<<<<<<<
#  Hard
#  Challenging
#  Extreme